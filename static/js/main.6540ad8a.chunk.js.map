{"version":3,"sources":["components/Wrapper/wrapper.js","components/Header/header.js","components/Col.js","components/BirdCard/bird.js","components/Row.js","components/Scores/scores.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Header","Col","size","split","map","join","BirdCard","components_Col","onClick","handleClick","id","alt","name","src","image","Row","concat","fluid","Footer","score","message","topScore","App","state","birds","birdsList","_this","index","findIndex","bird","itemClicked","clicked","newScore","newMessage","setState","shuffledArray","shuffle","array","i","length","j","Math","floor","random","_ref","_this2","this","Wrapper_wrapper","Header_header","Scores_scores","components_Row","components_BirdCard_bird","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6540ad8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nfunction Wrapper(props){\r\n    return <div className = \"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header(props){\r\n    return <div>\r\n              <header className = \"header\">CLICKY BIRDS</header>\r\n              <h3 className = \"gameTip\">Click on an image to earn points, but don't click on any more than once!</h3>\r\n           </div>\r\n    \r\n}\r\n\r\nexport default Header;","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\r\nimport Col from \"../Col.js\";\r\n\r\nimport \"./bird.css\";\r\n\r\nfunction BirdCard(props){\r\n    return (\r\n    <Col size = \"md-3\">\r\n        <div className=\"card\">\r\n        <div onClick = {() => props.handleClick(props.id)} className=\"img-container\">\r\n             <img alt={props.name} src={props.image} />        \r\n        </div>\r\n    </div> \r\n    </Col>    \r\n \r\n    );\r\n}\r\n\r\n\r\nexport default BirdCard;","import React from \"react\";\n\nimport \"./row.css\"\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\r\nimport Col from \"../Col.js\";\r\nimport \"./scores.css\";\r\n\r\n\r\nfunction Footer(props){\r\n    return (\r\n        <div className =\"row\">\r\n            <Col size = \"md-4\">\r\n                <p className = \"score\">Score : <span>{props.score}</span></p>\r\n            </Col>\r\n            <Col size = \"md-4\">\r\n                <p className = \"score\"><span>{props.message}</span></p>\r\n            </Col>\r\n            <Col size = \"md-4\">\r\n                <p className = \"score\"> Top Score : <span>{props.topScore}</span></p>\r\n            </Col>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n// import logo from './logo.svg';\nimport Wrapper from \"./components/Wrapper/wrapper.js\";\nimport Header from \"./components/Header/header.js\";\nimport BirdCard from \"./components/BirdCard/bird.js\";\nimport Row from \"./components/Row.js\";\nimport Scores from \"./components/Scores/scores.js\";\n\n\nimport birds from \"./birds.json\";\n\nimport './App.css';\n\n\nclass App extends React.Component{\n  state = {\n    birds,\n    topScore : 12,\n    score : 0,\n    message : \"\"\n  }\n\n  handleClick = id => {\n   \n    \n    const birdsList = this.state.birds;\n\n    // const index = birdsList.map(bird => bird.id ===id?{bird.clicked = true} : {bird.clicked = false} );\n\n    const index = birdsList.findIndex(bird => bird.id ===id );\n\n    let itemClicked = birdsList[index].clicked;\n  \n    let newScore = this.state.score;\n\n    let newMessage = \"\";\n\n    if(itemClicked){\n     \n      newScore = 0;\n      newMessage = \"You Guessed Incorrect\";\n    }\n    else{\n     \n      newScore ++ ;\n      birdsList[index].clicked = true;\n      newMessage = newScore === this.state.topScore ? \"You Won\" : \"You Guessed Correct\";\n      // newMessage = \"You Guessed Correct\";\n    }\n      \n    \n    this.setState({birds:birdsList});\n    this.setState({score:newScore});\n    this.setState({message:newMessage});\n\n\n    const shuffledArray = this.shuffle(this.state.birds);\n    this.setState({birds:shuffledArray});\n\n\n  }\n\n  shuffle = (array)=> {\n   \n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n\n  render(){\n    // const message = this.state.score === 0 ? \"You Guessed Incorrect\" : \"You Guessed Correct\"\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <Header></Header>\n          \n          <Scores\n           score= {this.state.score}\n           message = {this.state.message}\n           topScore = {this.state.topScore}>\n          </Scores>     \n          \n          \n          <Row>\n         \n            {this.state.birds.map(bird => (          \n                <BirdCard\n                  handleClick = {this.handleClick}\n                  id = {bird.id}\n                  key = {bird.key}\n                  name = {bird.name}\n                  image = {bird.image}\n                 />                \n              ))}\n            \n          </Row>    \n         \n        </Wrapper>\n        \n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}